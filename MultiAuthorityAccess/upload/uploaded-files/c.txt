/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ownership;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 *
 * @author Sai Krishna
 */
import java.io.*;
import java.security.SecureRandom;
//import java.io.IOException;
//import java.io.PrintWriter;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
//import java.sql.DriverManager;
//import java.sql.PreparedStatement;
//import java.sql.Statement;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
//import java.util.Iterator;
//import java.util.List;
//import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.ImageIO;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
//import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

public class Url extends HttpServlet {   
    int hhh,hi;
     PrintWriter out;
protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException 
{
   out = response.getWriter();
      String filename=request.getParameter("file");
      
    int randomInt=0;
Random randomGen = new Random();
for (int idx = 1; idx <= 1; ++idx)
{
  randomInt = randomGen.nextInt(1000);
}
    PreparedStatement ps;
    ResultSet rs;
    String status="Requested";
String status1="Accepted";
String id1 = null;
String filename1="";
        response.setContentType("text/html;charset=UTF-8");
        PrintWriter out = response.getWriter();
       String fstat="";
        try {
             List<String> ms= new ArrayList<String>();
             String finalimage="" ;
       boolean isMultipart = ServletFileUpload.isMultipartContent(request);
       List<String> m= new ArrayList<String>();
       File savedFile;if (!isMultipart) {
 } else {
  FileItemFactory factory = new DiskFileItemFactory();
  ServletFileUpload upload = new ServletFileUpload(factory);
  List items = null;
  try {
  items = upload.parseRequest(request);
  }catch (FileUploadException e){
  e.printStackTrace();
  }
  Iterator itr = items.iterator();
  while (itr.hasNext()) {
     List<String> al= new ArrayList<String>();
  String sss=""; 
  FileItem item = (FileItem) itr.next();
  String value ="";
  String a[];
  if(item.isFormField()){
  String name = item.getFieldName();
  value = item.getString();
  al.add(value);
  for(int i=0;i<al.size();i++)
      {
        sss+=al.get(i);
        System.out.println("is this image"+sss);}
a=sss.split("-");
for(int i=0;i<a.length;i++){
String am=a[i];
System.out.println("aaaaaaaaaaaaaaaa"+a[i]);
m.add(a[i]);
}
  } 
  
  else{
  System.out.println("ssssssssssssssssaaaaaa"+m.get(0));
  System.out.println("the value Filename"+m.get(1));
  String itemName = item.getName();
  Random generator = new Random();
  int r = Math.abs(generator.nextInt());

  String reg = "[.*]";
  String replacingtext = "";
  Pattern pattern = Pattern.compile(reg);
  Matcher matcher = pattern.matcher(itemName);
  StringBuffer buffer = new StringBuffer();
  while (matcher.find()) {
  matcher.appendReplacement(buffer, replacingtext);
  }
  int IndexOf = itemName.indexOf("."); 
  int Indexf = itemName.indexOf("."); 
  String domainName = itemName.substring(IndexOf);
 // Random generator = new Random();
 // int rr = Math.abs(generator.nextInt());
                    finalimage = buffer.toString() + "_" + r + domainName;
 // finalimage = buffer.toString();
    System.out.println("Final Image==="+finalimage);
    System.out.println("Domain==="+domainName);
    ms.add(finalimage);
    savedFile = new File("C:\\files\\"+finalimage);
    item.write(savedFile);
    if(domainName.equals(".jpg")||domainName.equals(".png")||domainName.equals(".gif"))
    {
        BufferedImage buffImg = ImageIO.read(savedFile);
        hi=buffImg.hashCode();
    }
    else
    {
    try {
						item.write(savedFile);
                                                BufferedReader br= null;
                    CipherHelper c= new CipherHelper();
                    String sCurrentLine;
                    StringBuilder b= new StringBuilder();
                    // String path5 = "C:\\Users\\Sai Krishna\\Desktop\\priya\\";
                    br = new BufferedReader(new FileReader("C:\\files\\" + finalimage));
                    while ((sCurrentLine = br.readLine()) != null) 
                    {
                       // System.out.println(sCurrentLine);
                        b.append(c.cipher("12345678",sCurrentLine));
                        System.out.println("hiii"+sCurrentLine);
                         String myAppContext = sCurrentLine;
    String consumerSecret = "959";
    String algorithm = "HMACSHA256";
    byte[] encodedContext;

    // Base64 encoded context;
    encodedContext = new Base64(true).encode(myAppContext.getBytes());
    System.out.print("Encoded Context : ");
    System.out.println(encodedContext);

    //Generate Signed context           
    SecretKey hmacKey = new SecretKeySpec(consumerSecret.getBytes(), algorithm);
    Mac mac = Mac.getInstance(algorithm);
    mac.init(hmacKey);

    byte[] digest = mac.doFinal(myAppContext.getBytes());       
    System.out.print("Created digest : ");
    System.out.println(digest);
    hhh=sCurrentLine.hashCode();
                        System.out.println("hash value="+hhh);
                    }
                       
                    PrintWriter writer = new PrintWriter("C:\\files\\enc\\"+finalimage, "UTF-8");
                    writer.println(b.toString());
                    writer.close();
		String filePath = "C:\\files\\"+finalimage;              
		    BufferedReader br1= null;                  
                    String sCurrentLine1;
                    StringBuilder b1= new StringBuilder();                   
                    br1 = new BufferedReader(new FileReader("C:\\files\\enc\\" + finalimage));
                    while ((sCurrentLine1 = br1.readLine()) != null) 
                    {
                         System.out.println("hiii"+sCurrentLine1);
                         String myAppContext = sCurrentLine1;
    String consumerSecret = "959";
    String algorithm = "HMACSHA256";
    byte[] encodedContext;

    // Base64 encoded context;
    encodedContext = new Base64(true).encode(myAppContext.getBytes());
    System.out.print("Encoded Context : ");
    System.out.println(encodedContext);

    //Generate Signed context           
    SecretKey hmacKey = new SecretKeySpec(consumerSecret.getBytes(), algorithm);
    Mac mac = Mac.getInstance(algorithm);
    mac.init(hmacKey);

    byte[] digest = mac.doFinal(myAppContext.getBytes());       
    System.out.print("Created digest : ");
    System.out.println(digest);
                          hi=sCurrentLine1.hashCode();
                        
                        System.out.println("hash value 2="+hi);
                    }			
                    } catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
    }
//Path p = Paths.get("D:\\VLSA\\New folder\\Hybrid\\hybrid\\OptimizationCloudMigration\\web\\files\\"+finalimage);
//String file = p.getFileName().toString();
//      System.out.println(file);
////        
//	// Loop over all indexes in the String.
//      
//	for (int i = 0; i <3; i++) 
//        {
//	    // Get char at this index and display it.
//	    char letter = file.charAt(i);
//	    System.out.println(letter);  
//      
//}
  }
    }
 String strQuery="";
  
      HttpSession hs=request.getSession();
      String ide = hs.getAttribute("userid").toString();
      String username = hs.getAttribute("user").toString();
      MetaforHTmlKeyWord cons=new MetaforHTmlKeyWord();
      try {
	  String sql1= "select * from aduplicate";
	  ps=DBConnection.getConnection().prepareStatement(sql1);
	  rs=ps.executeQuery(sql1);
		while(rs.next()){
		fstat=rs.getString("status");
                id1=rs.getString("userid");
                filename1=rs.getString("filename");
		}
} catch (Exception ex) {
    System.out.println(ex);
}
//       Path p = Paths.get("C:\\files\\"+finalimage);
//String file = p.getFileName().toString();
//      System.out.println(file);
//        
	// Loop over all indexes in the String.
      
	

    
      if(status.equals(fstat)&&ide.equals(id1)&&ms.get(0).equals(filename))
      {
         
    hs.setAttribute("filename", "Duplicate Request in process");
    response.sendRedirect("Drag.jsp");
}
 else if(status1.equals(fstat)&&ide.equals(id1)&&ms.get(0).equals(filename))
         {
    strQuery = "insert into uduplicate(userid,filename,uploadedby)values('"+ide+"','"+ms.get(0)+"','"+username+"')";
      ps=DBConnection.getConnection().prepareStatement(strQuery);
     int r = ps.executeUpdate(strQuery);
     if(r>0){
    hs.setAttribute("filename","Duplicate File Also Inserted");
     response.sendRedirect("Drag.jsp");
     }
}else{
    strQuery = "insert into fileupload(filename,fileuploads,userid,secretkey,username,hmac)values('"+ms.get(0)+"','"+ms.get(0)+"','"+ide+"','"+randomInt+"','"+username+"','"+hi+"')";
      ps=DBConnection.getConnection().prepareStatement(strQuery);
          System.out.println(ms.get(0));
      int r = ps.executeUpdate(strQuery);
      
    hs.setAttribute("filename","File uploaded Successfully");
    out.println("<script>"
				+"alert('File uploaded Successfully')"
				+"</script>");
            RequestDispatcher rd=request.getRequestDispatcher("Drag.jsp");
            rd.include(request, response);
//response.sendRedirect("Drag.jsp");
        }
       } }catch (Exception e) {
  System.out.println(e.getMessage());
  System.out.println(e);
  } finally {
  out.close();
  }  
 
  
  
    }
    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
